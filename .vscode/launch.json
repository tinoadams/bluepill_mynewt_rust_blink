{
    //  VSCode Debugger Config for Cortex Debug Extension.  We use Cortex Debug because it shows more details, e.g. the STM32 Peripherals.
    "version": "0.2.0",
    "configurations": [
        {
            //  Cortex Debug Configuration: https://marcelball.ca/projects/cortex-debug/cortex-debug-launch-configurations/
            "name": "Debug firmware",
            "type": "cortex-debug",
            "request": "launch",
            //  OpenOCD
            "servertype": "openocd",
            "cwd": "${workspaceRoot}",
            //  Application Executable to be flashed to Blue Pill before debugging.  Note that the Application ELF image does not contain a valid Image Header.  So we must bypass the Bootloader, shown below.
            "executable": "mynewt/bin/targets/firmware/app/apps/firmware/firmware.elf",
            //  For Bootloader: "executable": "mynewt/bin/targets/mcu_boot/app/boot/mynewt/mynewt.elf",
            "device": "STM32F103C8",
            "configFiles": [
                //  Tell OpenOCD to run our custom debug commands.
                "openocd/debug.ocd"
            ],
            "preLaunchCommands": [
                //  Before loading the Application, run these gdb commands.
                //  Set timeout for executing openocd commands.
                "set remotetimeout 60",
                //  This indicates that an unrecognized breakpoint location should automatically result in a pending breakpoint being created.
                "set breakpoint pending on",
                //  Display the Arm instruction when hitting breakpoint.
                //  "display/i $pc",
                //  Load Bootloader symbols in case we jump to the Bootloader.
                //  "symbol-file bin/targets/bluepill_boot/app/apps/boot/boot.elf",
                //  Restore Application symbols.
                //  "symbol-file bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf",
            ],
            "postLaunchCommands": [
                //  After loading the Application, run these gdb commands.  The Application ELF image does not contain a valid Image Header.
                //  So we bypass the Bootloader and jump to the Application directly.
                "stepi", //  Must step before setting PC.
                "set $pc = Reset_Handler", //  Prepare to jump to the Application's Reset Handler.
                "stepi", //  Execute the Reset Handler.
                "break main", //  Break at main().
                "break __assert_func", //  Break for any assert failures.
                "break os_default_irq", //  Break for any unhandled interrupts.
                //  "continue",                 //  Run until main() and break.
            ],
            "preRestartCommands": [],
            "postRestartCommands": [],
        }
    ]
}